<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Nevermore</title>
    <link>https://ne7ermore.github.io/post/</link>
    <description>Recent content in Posts on Nevermore</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Apr 2018 13:00:25 +0800</lastBuildDate>
    
	<atom:link href="https://ne7ermore.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang源码-sort</title>
      <link>https://ne7ermore.github.io/post/golang-sort/</link>
      <pubDate>Tue, 10 Apr 2018 13:00:25 +0800</pubDate>
      
      <guid>https://ne7ermore.github.io/post/golang-sort/</guid>
      <description>Golang sort包相对比较独立，而且可以帮助更好的理解interface的原理和使用
二分查找 思路： 先定位中间位置 index，如果 fn(index) == true, 就移动j 到index，如果fn(index) == false，就移动I到index+1位置
func Search(n int, f func(int) bool) int { // Define f(-1) == false and f(n) == true. // Invariant: f(i-1) == false, f(j) == true. i, j := 0, n for i &amp;lt; j { h := i + (j-i)/2 // avoid overflow when computing h // i ≤ h &amp;lt; j if !f(h) { i = h + 1 // preserves f(i-1) == false } else { j = h // preserves f(j) == true } } // i == j, f(i-1) == false, and f(j) (= f(i)) == true =&amp;gt; answer is i.</description>
    </item>
    
  </channel>
</rss>